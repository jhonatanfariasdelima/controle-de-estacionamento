class Carro:
    def __init__(self, controle, marca, modelo, cor, placa):
        self.controle = controle
        self.marca = marca
        self.modelo = modelo
        self.cor = cor
        self.placa = placa

    def informacao(self):
        print('número de chegada = ', str(self.controle))
        print('marca = ', self.marca)
        print('modelo = ', self.modelo)
        print('cor = ', self.cor)
        print('placa = ', self.placa)


def print_linha():
    print('---' * 15)


def estacionar_carro():
    carros_parados = open('estacionamento_paradosAGR.txt', 'r')
    quantidade_carros = carros_parados.readline(1)  # pega o conteudo da 1° posição
    carros_parados.close()

    if int(quantidade_carros) <= 9:  # estacionamento com espaço para 10 carros parados ao mesmo tempo
        while True:
            historico_carros = open('estacionamento_historico', 'r')
            cont = historico_carros.readline(1)  # pega o conteudo da 1° posição
            historico_carros.close()

            historico_carros = open('estacionamento_historico', 'r+')
            cont2 = int(cont) + 1  # conteudo da 1° posição + 1
            historico_carros.seek(0)  # volta ao inicio do arquivo
            historico_carros.write(str(cont2))  # escreve o resultado na 1° posição do arquivo
            historico_carros.close()

            # dados do carro digitados pelo usuario
            controle = str(cont2)
            marca = input('digite a marca do carro: ')
            modelo = input('digite o modelo do carro: ')
            cor = input('digite a cor do carro: ')
            placa = input('digite a placa do carro: ')

            if marca and modelo and cor and placa != '':  # evita campos em branco
                print_linha()
                carro = Carro(controle, marca, modelo, cor, placa)
                Carro.informacao(carro)

                car = [controle, marca, modelo, cor, placa]
                historico_carros = open('estacionamento_historico', 'a')
                historico_carros.write(str(car) + '\n')
                historico_carros.close()

                carros_parados = open('estacionamento_paradosAGR.txt', 'a')
                carros_parados.write(str(car) + '\n')
                carros_parados.close()
                carros_parados = open('estacionamento_paradosAGR.txt', 'r+')
                carros_parados.seek(0)  # volta ao inicio do arquivo
                carros_parados.write(str(cont2))  # escreve o resultado na 1° posição do arquivo
                carros_parados.close()
                print('')
                print('\033[1;94mcarro estacionado\033[m')
                break

            else:  # se deixar campos vazios...
                historico_carros = open('estacionamento_historico', 'r')
                cont = historico_carros.readline(1)  # pega o conteudo da 1° posição
                historico_carros.close()

                historico_carros = open('estacionamento_historico', 'r+')
                cont2 = int(cont) - 1  # conteudo da 1° posição - 1
                historico_carros.seek(0)  # volta ao inicio do arquivo
                historico_carros.write(str(cont2))  # escreve o resultado na 1° posição do arquivo
                historico_carros.close()

                print_linha()
                print('\033[1;31mvocê não pode deixar campos em branco!\033[m')
                break
    else:
        print('estacionamento lotado')


def retirar_carro():
    historico_carros = open('estacionamento_historico', 'r')

    # dados do carro a ser retirado
    numero = input('digite o número do carro: ')
    marca = input('digite a marca do carro: ')
    modelo = input('digite o modelo do carro: ')
    cor = input('digite a cor do carro: ')
    placa = input('digite a placa do carro: ')
    estacionados = str([numero, marca, modelo, cor, placa])

    historico_carros.seek(38)
    cont = len(estacionados)

    print('\033[1;34manalizando : \033[m', estacionados)
    controlador = 0
    while True:
        analizando = str(historico_carros.readline(cont))

        if analizando == estacionados:  # se carro digitado estiver no historico
            print('\033[1;94mok, carro retirado\033[m')
            historico_carros.seek(0)
            carros_parados = open('estacionamento_paradosAGR.txt', 'w')
            contador = 0

            while contador < 9:
                read = historico_carros.readlines()
                read.remove(str(estacionados + '\n'))
                contador += 1

                for elemento in read:
                    carros_parados.write(str(elemento))
                break
            carros_parados.close()
            carros_parados = open('estacionamento_paradosAGR.txt', 'r+')
            cont = carros_parados.readline(1)
            cont2 = int(cont) - 1  # conteudo da 1° posição - 1
            carros_parados.seek(0)  # volta ao inicio do arquivo
            carros_parados.write(str(cont2))  # escreve o resultado na 1° posição do arquivo
            carros_parados.close()
            break

        else:
            if controlador < 9:
                controlador += 1
                continue
            else:
                print('\033[1;31mcarro não encontrado\033[m')
                break
    historico_carros.close()


def retirar_carros():
    # dados do carro a ser retirado
    numero = input('digite o número do carro: ')
    marca = input('digite a marca do carro: ')
    modelo = input('digite o modelo do carro: ')
    cor = input('digite a cor do carro: ')
    placa = input('digite a placa do carro: ')
    estacionados = str([numero, marca, modelo, cor, placa])

    carros_parados = open('estacionamento_paradosAGR.txt', 'r')
    carros_parados.seek(38)

    cont = len(estacionados)

    print('\033[1;34manalizando : \033[m', estacionados)

    controlador = 0

    while True:
        analizando = str(carros_parados.readline(cont))

        if analizando == estacionados:  # se carro digitado estiver parado
            print('\033[1;94mok, carro retirado\033[m')

            carros_parados.seek(0)

            lista = carros_parados.readlines()
            lista.remove(estacionados + '\n')

            controlador += 1
            carro = open('estacionamento_paradosAGR.txt', 'w')
            carro.truncate()
            for ele in lista:
                carro.write(ele)
            carro.close()

            carros_parados = open('estacionamento_paradosAGR.txt', 'r+')
            cont = carros_parados.readline()
            cont2 = (int(cont)) - 1  # conteudo da 1° posição - 1
            carros_parados.seek(0)  # volta ao inicio do arquivo
            carros_parados.write(str(cont2))  # escreve o resultado na 1° posição do arquivo
            carros_parados.close()
            break

        else:
            if controlador < 9:
                controlador += 1
                continue

            else:
                print('\033[1;31mcarro não encontrado\033[m')
                break


def carros_ainda_estacionados():
    carros_parados = open('estacionamento_paradosAGR.txt', 'r')
    print(carros_parados.read())
    carros_parados.close()


def historico():
    historico_carros = open('estacionamento_historico', 'r')
    historico_carros.seek(0)
    print(historico_carros.read())  # pega o conteúdo da 1° posição
    historico_carros.close()


def zerar_historico():
    # escreve o padrão na 1° posição do arquivo trucando o conteudo
    padrao = str('0\n(num., marca, modelo, cor, placa)\n\n')

    historico_carros = open('estacionamento_historico', 'w')
    historico_carros.seek(0)
    historico_carros.write(str(padrao))
    historico_carros.close()
    print('\033[1;31mcarros deletados\033[m')


def zerar_carros_parados():
    # escreve o padrão na 1° posição do arquivo trucando o conteudo
    padrao = str('0\n(num., marca, modelo, cor, placa)\n\n')

    historico_carros = open('estacionamento_paradosAGR.txt', 'w')
    historico_carros.seek(0)
    historico_carros.write(str(padrao))
    historico_carros.close()
    print('\033[1;31mcarros deletados\033[m')


# início
print_linha()
print("\033[1;92mBem Vindo\033[m")
while True:
    print_linha()
    # menu de opções
    print("\033[1;92mMENU DE OPÇÕES\n\033[m"
          "[1] estacionar carro\n"
          "[2] retirar carro\n"
          "[3] ver carros ainda estacionados\n"
          "[4] ver historico de carros já estacionados\n"
          "[5] zerar historico de carros\n"
          "[6] zerar carros estacionados\n"
          "[7] sair")
    try:
        opcao = int(input('\033[1;33mescolha uma opção: \033[m'))
        print_linha()

        if opcao == 1:  # estacionar carros
            estacionar_carro()
            continue

        elif opcao == 2:  # retirar carros
            retirar_carros()
            continue

        elif opcao == 3:  # ver carros ainda estacionados
            carros_ainda_estacionados()
            continue

        elif opcao == 4:  # ver carros já estacionados
            historico()
            continue

        elif opcao == 5:  # zerar histórico de carros
            zerar_historico()
            continue

        elif opcao == 6:  # zerar carros estacionados
            zerar_carros_parados()
            continue

        elif opcao == 7:  # sair
            break

    except ValueError:
        print_linha()
        print('opção invalida!')
        continue

print("Fim Do Programa")
